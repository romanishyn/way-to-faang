https://leetcode.com/discuss/interview-question/862600/

Platfrom: HackerRank
Position: Experienced

Amazon parses logs of user transactions/activity to flag fraudulent activity. The log file is represented as an Array of arrays. The arrays consist of the following data:

[<userid1> <userid2> <# of transactions>]

For example:

[345366 89921 45]
Note the data is space delimited

So, the log data would look like:

[
[345366 89921 45],
[029323 38239 23]
...
]
Write a function to parse the log data to find distinct users that meet or cross a certain threshold. The function will take in 2 inputs:

Input 1: Log data in form an array of arrays
Input 2: threshold as an integer

Output should be an array of userids that are sorted.

If same userid appears in the transaction as userid1 and userid2, it should count as one occurence, not two.

Example:
Input 1:

[
[345366 89921 45],
[029323 38239 23],
[38239 345366 15],
[029323 38239 77],
[345366 38239 23],
[029323 345366 13],
[38239 38239 23]
...
]
Input 2: 3

Ouput: [345366 , 38239, 029323]

Explanation:
Given the following counts of userids, there are only 3 userids that meet or exceed the threshold of 3.
345366 -4 , 38239 -5, 029323-3, 89921-1


https://leetcode.com/discuss/interview-question/862600/Amazon-or-OA-2020-or-Transaction-Logs/710452
the problem statement says "Output should be an array of userids that are sorted." the output in the example, [345366 , 38239, 029323],
doesn't appear to be sorted lexiographically or numerically or by the order each userid appears in the log input.
i thought it might have something to do with the # of transactions but that doesn't seem to be it either.
anyone know what order the problem is implying?

https://leetcode.com/discuss/interview-question/862600/Amazon-or-OA-2020-or-Transaction-Logs/732584
I had this in my oa yesterday, it wants them to be sorted according to their actual integer value,
not lexiographically and not by the transaction numbers. this solves it:
Collections.sort(result, new Comparator() {
    public int compare(String s1, String s2) {
        return Integer.valueOf(s1).compareTo(Integer.valueOf(s2));
    }
});