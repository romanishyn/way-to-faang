Links:
LC: https://leetcode.com/problems/maximum-frequency-stack/
Educative: https://www.educative.io/courses/grokking-the-coding-interview/R8o6vV83DLY

/*----------------------------------------------------------------------------*/

Maximum Frequency Stack

Design a class that simulates a Stack data structure,
implementing the following two operations:

push(int num):
Pushes the number ‘num’ on the stack.

pop():
Removes and returns the most frequent element in the stack.
If there is a tie, return the number which was pushed later.

Example:
After following push operations: push(1), push(2), push(3), push(2), push(1), push(2), push(5)

1. pop() should return 2, as it is the most frequent number
2. Next pop() should return 1
3. Next pop() should return 2

Note:
Calls to FreqStack.push(int x) will be such that 0 <= x <= 10^9.
It is guaranteed that FreqStack.pop() won't be called if the stack has zero elements.
The total number of FreqStack.push calls will not exceed 10000 in a single test case.
The total number of FreqStack.pop calls will not exceed 10000 in a single test case.
The total number of FreqStack.push and FreqStack.pop calls will not exceed 150000 across all test cases.

/*----------------------------------------------------------------------------*/

Python3
class FreqStack:

    def __init__(self):
        

    def push(self, x: int) -> None:
        

    def pop(self) -> int:

Java
class FreqStack {

    public FreqStack() {
        
    }

    public void push(int x) {
        
    }

    public int pop() {
        
    }
}

C#
public class FreqStack {

    public FreqStack() {
        
    }

    public void Push(int x) {
        
    }

    public int Pop() {
        
    }
}

C++
class FreqStack {
public:
    FreqStack() {
        
    }

    void push(int x) {
        
    }

    int pop() {
        
    }
};

/*----------------------------------------------------------------------------*/

/*
Maintain hash map of number and frequency.
Maintain max heap of pushed values.

N - number of push calls

Time O(logN) - push and pop
Space O(N)
*/
class FreqStack {
    struct Number {
        int value;
        int frequency;
        int id;

        bool operator < ( const Number& rhs ) const {
            if( frequency == rhs.frequency )
                return id < rhs.id;
            else
                return frequency < rhs.frequency;
        }
    };

    std::unordered_map< int, int > numToFrequency;
    std::priority_queue< Number > maxHeap;

    int getId() {
        static int id = 0;
        return id++;
    }

public:
    FreqStack() {
        
    }

    void push(int x) {
        ++numToFrequency[ x ];
        Number number{
            x,
            numToFrequency[ x ],
            getId()
        };
        maxHeap.push( number );
    }

    int pop() {
        auto number = maxHeap.top();
        maxHeap.pop();
        --numToFrequency[ number.value ];
        return number.value;
    }
};

/*----------------------------------------------------------------------------*/

/*
Stack of stacks

Time O(1) push, pop
Space O(N)
*/
class FreqStack {
    std::unordered_map< int, int > numToFrequency;
    std::unordered_map< int, std::stack< int > > groups;
    int maxFrequency{ 0 };

public:
    FreqStack() {
        
    }

    void push(int x) {
        ++numToFrequency[ x ];
        groups[ numToFrequency[ x ] ].push( x );
        maxFrequency = std::max( maxFrequency, numToFrequency[ x ] );
    }

    int pop() {
        int number = groups[ maxFrequency ].top();
        groups[ maxFrequency ].pop();
        if( groups[ maxFrequency ].empty() ) {
            groups.erase( maxFrequency );
            --maxFrequency;
        }
        if( --numToFrequency[ number ] == 0 )
            numToFrequency.erase( number );
        return number;
    }
};

/*----------------------------------------------------------------------------*/

/*
Bucket sort

Time O(1) push, pop
Space O(N)
*/
class FreqStack {
    std::vector< std::stack< int > > buckets;
    std::unordered_map< int, int > numToFrequency;

public:
    FreqStack() {
        
    }

    void push(int x) {
        if( buckets.size() == numToFrequency[ x ] )
            buckets.push_back( {} );
        buckets[ numToFrequency[ x ] ].push( x );
        ++numToFrequency[ x ];
    }

    int pop() {
        int number = buckets.back().top();
        buckets.back().pop();
        if( buckets.back().empty() )
            buckets.pop_back();
        if( --numToFrequency[ number ] == 0 )
            numToFrequency.erase( number );

        return number;
    }
};

/*----------------------------------------------------------------------------*/
